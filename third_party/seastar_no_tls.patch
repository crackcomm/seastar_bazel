diff --git a/include/seastar/http/client.hh b/include/seastar/http/client.hh
index 0d1f2d29..c33990f9 100644
--- a/include/seastar/http/client.hh
+++ b/include/seastar/http/client.hh
@@ -28,7 +28,9 @@ namespace bi = boost::intrusive;
 
 namespace seastar {
 
+#ifndef SEASTAR_NO_TLS
 namespace tls { class certificate_credentials; }
+#endif
 
 namespace http {
 
@@ -163,6 +165,7 @@ class client {
      */
     explicit client(socket_address addr);
 
+#ifndef SEASTAR_NO_TLS
     /**
      * \brief Construct a secure client
      *
@@ -175,6 +178,7 @@ class client {
      *
      */
     client(socket_address addr, shared_ptr<tls::certificate_credentials> creds, sstring host = {});
+#endif
 
     /**
      * \brief Construct a client with connection factory
diff --git a/include/seastar/http/httpd.hh b/include/seastar/http/httpd.hh
index e9f9606d..9df9273e 100644
--- a/include/seastar/http/httpd.hh
+++ b/include/seastar/http/httpd.hh
@@ -42,9 +42,14 @@
 #include <vector>
 #include <boost/intrusive/list.hpp>
 #include <seastar/http/routes.hh>
-#include <seastar/net/tls.hh>
 #include <seastar/core/shared_ptr.hh>
 
+#ifndef SEASTAR_NO_TLS
+#include <seastar/net/tls.hh>
+#else
+#include <seastar/net/api.hh>
+#endif
+
 namespace seastar {
 
 namespace http {
@@ -118,7 +123,6 @@ class http_server {
     uint64_t _requests_served = 0;
     uint64_t _read_errors = 0;
     uint64_t _respond_errors = 0;
-    shared_ptr<seastar::tls::server_credentials> _credentials;
     sstring _date = http_date();
     timer<> _date_format_timer { [this] {_date = http_date();} };
     size_t _content_length_limit = std::numeric_limits<size_t>::max();
@@ -130,6 +134,11 @@ class http_server {
     explicit http_server(const sstring& name) : _stats(*this, name) {
         _date_format_timer.arm_periodic(1s);
     }
+
+#ifndef SEASTAR_NO_TLS
+private:
+    shared_ptr<seastar::tls::server_credentials> _credentials;
+public:
     /*!
      * \brief set tls credentials for the server
      * Setting the tls credentials will set the http-server to work in https mode.
@@ -157,6 +166,7 @@ class http_server {
      *
      */
     void set_tls_credentials(shared_ptr<seastar::tls::server_credentials> credentials);
+#endif
 
     size_t get_content_length_limit() const;
 
diff --git a/include/seastar/net/api.hh b/include/seastar/net/api.hh
index 3d0b381a..cb79cdf5 100644
--- a/include/seastar/net/api.hh
+++ b/include/seastar/net/api.hh
@@ -170,7 +170,9 @@ struct session_dn {
 /// A \c connected_socket represents a full-duplex stream between
 /// two endpoints, a local endpoint and a remote endpoint.
 class connected_socket {
+#ifndef SEASTAR_NO_TLS
     friend class net::get_impl;
+#endif
     std::unique_ptr<net::connected_socket_impl> _csi;
 public:
     /// Constructs a \c connected_socket not corresponding to a connection
diff --git a/src/http/client.cc b/src/http/client.cc
index 7a66823c..f21a660b 100644
--- a/src/http/client.cc
+++ b/src/http/client.cc
@@ -22,7 +22,9 @@
 #include <seastar/core/loop.hh>
 #include <seastar/core/when_all.hh>
 #include <seastar/core/reactor.hh>
+#ifndef SEASTAR_NO_TLS
 #include <seastar/net/tls.hh>
+#endif
 #include <seastar/http/client.hh>
 #include <seastar/http/request.hh>
 #include <seastar/http/reply.hh>
@@ -165,6 +167,7 @@ client::client(socket_address addr)
 {
 }
 
+#ifndef SEASTAR_NO_TLS
 class tls_connection_factory : public connection_factory {
     socket_address _addr;
     shared_ptr<tls::certificate_credentials> _creds;
@@ -185,6 +188,7 @@ client::client(socket_address addr, shared_ptr<tls::certificate_credentials> cre
         : client(std::make_unique<tls_connection_factory>(std::move(addr), std::move(creds), std::move(host)))
 {
 }
+#endif
 
 client::client(std::unique_ptr<connection_factory> f)
         : _new_connections(std::move(f))
diff --git a/src/http/httpd.cc b/src/http/httpd.cc
index e22fb44d..f4130e55 100644
--- a/src/http/httpd.cc
+++ b/src/http/httpd.cc
@@ -205,9 +205,11 @@ future<> connection::read_one() {
         }
         ++_server._requests_served;
         std::unique_ptr<http::request> req = _parser.get_parsed_request();
+#ifndef SEASTAR_NO_TLS
         if (_server._credentials) {
             req->protocol_name = "https";
         }
+#endif
         if (_parser.failed()) {
             if (req->_version.empty()) {
                 // we might have failed to parse even the version
@@ -350,9 +352,11 @@ future<bool> connection::generate_reply(std::unique_ptr<http::request> req) {
     });
 }
 
+#ifndef SEASTAR_NO_TLS
 void http_server::set_tls_credentials(shared_ptr<seastar::tls::server_credentials> credentials) {
     _credentials = credentials;
 }
+#endif
 
 size_t http_server::get_content_length_limit() const {
     return _content_length_limit;
@@ -371,11 +375,15 @@ void http_server::set_content_streaming(bool b) {
 }
 
 future<> http_server::listen(socket_address addr, listen_options lo) {
+#ifndef SEASTAR_NO_TLS
     if (_credentials) {
         _listeners.push_back(seastar::tls::listen(_credentials, addr, lo));
     } else {
         _listeners.push_back(seastar::listen(addr, lo));
     }
+#else
+    _listeners.push_back(seastar::listen(addr, lo));
+#endif
     return do_accepts(_listeners.size() - 1);
 }
 future<> http_server::listen(socket_address addr) {
